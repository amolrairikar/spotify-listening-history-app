name: Spotify Listening History App CI/CD Pipeline

on:
  push:

permissions:
  contents: read
  id-token: write

jobs:

  get_test_coverage:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Make the test script executable
        run: chmod +x pipeline_scripts/run_tests.sh

      - name: Run unit and component tests
        run: ./pipeline_scripts/run_tests.sh

  build_lambdas:

    runs-on: ubuntu-latest
    needs: get_test_coverage
    strategy:
      matrix:
        lambda:
          - name: get_recently_played
            handler_file: get_recently_played.py
            path: src/lambdas/get_recently_played
          - name: etl_process
            handler_file: perform_etl.py
            path: src/lambdas/etl_process

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build Lambda package
        run: |
          chmod +x ./pipeline_scripts/zip_lambdas.sh
          ./pipeline_scripts/zip_lambdas.sh "${{ matrix.lambda.name }}" "${{ matrix.lambda.handler_file }}" "${{ matrix.lambda.path }}"

      - name: Upload Lambda zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.lambda.name }}_lambda_zip
          path: ${{ matrix.lambda.path }}/${{ matrix.lambda.name }}.zip

  deploy_infrastructure:

    runs-on: ubuntu-latest
    needs: build_lambdas
    env:
      S3_STATE_BUCKET_NAME: ${{ secrets.S3_STATE_BUCKET_NAME }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      TF_VAR_infra_role_arn: ${{ secrets.TF_VAR_infra_role_arn }}
      TF_VAR_account_number: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_email: ${{ secrets.EMAIL }}
      TF_VAR_environment: "prod"
      TF_VAR_project_name: "spotifyListeningHistoryApp"
      TF_VAR_datalake_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_spotify_client_id: ${{ secrets.CLIENT_ID }}
      TF_VAR_spotify_client_secret: ${{ secrets.CLIENT_SECRET }}
      TF_VAR_sns_topic_arn: ${{ secrets.SNS_TOPIC_ARN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda fetch recently played zip artifact
        uses: actions/download-artifact@v4
        with:
          name: get_recently_played_lambda_zip

      - name: Download Lambda ETL zip artifact
        uses: actions/download-artifact@v4
        with:
          name: etl_process_lambda_zip

      - name: List files in the root directory
        run: ls -la

      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: 'us-east-2'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${S3_STATE_BUCKET_NAME}" \
            -backend-config="key=spotify-listening-history-app/terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="assume_role={role_arn=\"${TF_VAR_infra_role_arn}\", session_name=\"terraform-session\"}"

      - name: Plan Terraform
        run: |
          echo "Planning Terraform configuration..."
          terraform plan -out=tfplan

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
