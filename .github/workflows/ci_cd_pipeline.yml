name: Spotify Listening History App CI/CD Pipeline

on:
  push:

permissions:
  contents: read
  id-token: write

jobs:
  get_test_coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Copy retry_api_exceptions.py file
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/layers/retry_api_exceptions/retry_api_exceptions.py
          cp retry_api_exceptions.py src/lambdas/etl_process/retry_api_exceptions.py
          cp retry_api_exceptions.py src/lambdas/get_recently_played/retry_api_exceptions.py

      - name: Get test script and run tests
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/scripts/run_tests.sh
          chmod +x run_tests.sh
          ./run_tests.sh --source src --omit "src/lambdas/etl_process/retry_api_exceptions.py,src/lambdas/get_recently_played/retry_api_exceptions.py"

  build_lambdas:
    runs-on: ubuntu-latest
    needs: get_test_coverage
    strategy:
      matrix:
        lambda:
          - name: get_recently_played
            handler_file: get_recently_played.py
            path: src/lambdas/get_recently_played
          - name: etl_process
            handler_file: perform_etl.py
            path: src/lambdas/etl_process
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build Lambda package
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/scripts/build_lambda_package.sh
          chmod +x ./build_lambda_package.sh
          ./build_lambda_package.sh "${{ matrix.lambda.name }}" "${{ matrix.lambda.handler_file }}" "${{ matrix.lambda.path }}"

      - name: Upload Lambda zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-${{ matrix.lambda.name }}
          path: ${{ matrix.lambda.path }}/${{ matrix.lambda.name }}.zip

  combine_artifacts:
    runs-on: ubuntu-latest
    needs: build_lambdas
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts

      - name: View files in combined-artifacts directory
        run: ls -la combined-artifacts

      - name: Move ZIPs to combined folder
        run: |
          mkdir combined-zips
          find combined-artifacts -name '*.zip' -exec mv {} combined-zips/ \;

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-lambdas
          path: combined-zips/

  deploy_infrastructure:
    runs-on: ubuntu-latest
    needs: combine_artifacts
    env:
      S3_STATE_BUCKET_NAME: ${{ secrets.S3_STATE_BUCKET_NAME }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      TF_VAR_infra_role_arn: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
      TF_VAR_email: ${{ secrets.EMAIL }}
      TF_VAR_environment: "prod"
      TF_VAR_project_name: "spotifyListeningHistoryApp"
      TF_VAR_aws_region_name: "us-east-2"
      TF_VAR_datalake_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_spotify_client_id: ${{ secrets.CLIENT_ID }}
      TF_VAR_spotify_client_secret: ${{ secrets.CLIENT_SECRET }}
      TF_VAR_sns_topic_arn: ${{ secrets.SNS_TOPIC_ARN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda zip artifacts
        uses: actions/download-artifact@v4
        with:
          name: all-lambdas
          path: .

      - name: List files in the root directory
        run: ls -la

      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: 'us-east-2'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${S3_STATE_BUCKET_NAME}" \
            -backend-config="key=spotify-listening-history-app/terraform.tfstate" \
            -backend-config="region=${TF_VAR_aws_region_name}" \
            -backend-config="assume_role={role_arn=\"${TF_VAR_infra_role_arn}\", session_name=\"terraform-session\"}"

      - name: Plan Terraform
        run: |
          echo "Planning Terraform configuration..."
          terraform plan -out=tfplan

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
